<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAH/8AAH///+B////gf///4H///+B////gc=
</value>
  </data>
</root>